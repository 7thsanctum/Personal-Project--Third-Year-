//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    float3  gEyePosW;                   // Offset:    0, size:   12
    float3  gEmitPosW;                  // Offset:   16, size:   12
    float3  gEmitDirW;                  // Offset:   32, size:   12
    float   gGameTime;                  // Offset:   44, size:    4
    float   gTimeStep;                  // Offset:   48, size:    4
    float4x4 gViewProj;                 // Offset:   64, size:   64
}

cbuffer cbFixed
{
    float3  gAccelW = { -1, -9.80000019, 0 };// Offset:    0, size:   12
}

//
// 6 local object(s)
//
Texture2DArray gTexArray;
Texture1D gRandomTex;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
DepthStencilState DisableDepth
{
    DepthEnable = bool(FALSE /* 0 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
DepthStencilState NoDepthWrites
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthWriteMask = uint(ZERO /* 0 */);
};
GeometryShader gsStreamOut = 
    asm {
        //
        // Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
        //
        //
        // Buffer Definitions: 
        //
        // cbuffer cbPerFrame
        // {
        //
        //   float3 gEyePosW;                   // Offset:    0 Size:    12 [unused]
        //   float3 gEmitPosW;                  // Offset:   16 Size:    12
        //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
        //   float gGameTime;                   // Offset:   44 Size:     4
        //   float gTimeStep;                   // Offset:   48 Size:     4
        //   float4x4 gViewProj;                // Offset:   64 Size:    64 [unused]
        //
        // }
        //
        //
        // Resource Bindings:
        //
        // Name                                 Type  Format         Dim Slot Elements
        // ------------------------------ ---------- ------- ----------- ---- --------
        // samLinear                         sampler      NA          NA    0        1
        // gRandomTex                        texture  float4          1d    0        1
        // cbPerFrame                        cbuffer      NA          NA    0        1
        //
        //
        //
        // Input signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        //
        // Output signature:
        //
        // Name                 Index   Mask Register SysValue  Format   Used
        // -------------------- ----- ------ -------- -------- ------- ------
        // POSITION                 0   xyz         0     NONE   float   xyz 
        // VELOCITY                 0   xyz         1     NONE   float   xyz 
        // SIZE                     0   xy          2     NONE   float   xy  
        // AGE                      0     z         2     NONE   float     z 
        // TYPE                     0   x           3     NONE    uint   x   
        //
        gs_5_0
        dcl_globalFlags refactoringAllowed | skipOptimization
        dcl_constantbuffer cb0[4], immediateIndexed
        dcl_sampler s0, mode_default
        dcl_resource_texture1d (float,float,float,float) t0
        dcl_input v[1][0].xyz
        dcl_input v[1][1].xyz
        dcl_input v[1][2].xy
        dcl_input v[1][2].z
        dcl_input v[1][3].x
        dcl_temps 4
        dcl_inputprimitive point 
        dcl_stream m0
        dcl_outputtopology pointlist 
        dcl_output o0.xyz
        dcl_output o1.xyz
        dcl_output o2.xy
        dcl_output o2.z
        dcl_output o3.x
        dcl_maxout 6
        //
        // Initial variable locations:
        //   m0 <- ptStream; 
        //   v[0][0].x <- gin[0].InitialPosW.x; v[0][0].y <- gin[0].InitialPosW.y; v[0][0].z <- gin[0].InitialPosW.z; 
        //   v[0][1].x <- gin[0].InitialVelW.x; v[0][1].y <- gin[0].InitialVelW.y; v[0][1].z <- gin[0].InitialVelW.z; 
        //   v[0][2].x <- gin[0].SizeW.x; v[0][2].y <- gin[0].SizeW.y; v[0][2].z <- gin[0].Age; 
        //   v[0][3].x <- gin[0].Type
        //
        #line 113 "D:\Code\Visual Studio\C++ Code\Intro to Graphics\Chapter 20 Particle Systems (Cubed) - Copy\ParticleSystem\FX\Rain.fx"
        add r0.x, cb0[3].x, v[0][2].z  // r0.x <- gin[0].Age
        if_z v[0][3].x
        
        #line 118
          lt r0.y, l(0.002000), r0.x
          if_nz r0.y
            mov r0.y, l(0)  // r0.y <- i
            mov r0.z, r0.y  // r0.z <- i
            loop 
              ilt r0.w, r0.z, l(5)
              breakc_z r0.w
        
        #line 123
              nop 
              itof r0.w, r0.z
              div r0.w, r0.w, l(5.000000)
        
        #line 75
              add r0.w, r0.w, cb0[2].w  // r0.w <- u
        
        #line 78
              itof r1.x, l(0)
              sample_l_indexable(texture1d)(float,float,float,float) r1.xy, r0.w, t0.xzyw, s0, r1.x
              mov r1.xy, r1.xyxx  // r1.x <- v.x; r1.y <- v.z
              mov r1.xy, r1.xyxx  // r1.x <- <RandVec3 return value>.x; r1.y <- <RandVec3 return value>.z
        
        #line 123
              mul r1.xz, r1.xxyx, l(35.000000, 0.000000, 35.000000, 0.000000)  // r1.x <- vRandom.x; r1.z <- vRandom.z
              mov r1.y, l(20.000000)  // r1.y <- vRandom.y
        
        #line 127
              add r1.xyz, r1.xyzx, cb0[1].xyzx  // r1.x <- p.InitialPosW.x; r1.y <- p.InitialPosW.y; r1.z <- p.InitialPosW.z
              mov r2.xyz, l(0,0,0,0)  // r2.x <- p.InitialVelW.x; r2.y <- p.InitialVelW.y; r2.z <- p.InitialVelW.z
              mov r3.xy, l(1.000000,1.000000,0,0)  // r3.x <- p.SizeW.x; r3.y <- p.SizeW.y
              mov r0.w, l(0)  // r0.w <- p.Age
              mov r1.w, l(1)  // r1.w <- p.Type
              mov o0.xyz, r1.xyzx
              mov o1.xyz, r2.xyzx
              mov o2.xy, r3.xyxx
              mov o2.z, r0.w
              mov o3.x, r1.w
              emit_stream m0
              iadd r0.z, r0.z, l(1)
            endloop 
        
        #line 137
            mov r0.x, l(0)
          endif 
        
        #line 141
          mov o0.xyz, v[0][0].xyzx
          mov o1.xyz, v[0][1].xyzx
          mov o2.xy, v[0][2].xyxx
          mov o2.z, r0.x
          mov o3.x, v[0][3].x
          emit_stream m0
        else 
        
        #line 146
          ge r0.y, l(3.000000), r0.x
          if_nz r0.y
            mov o0.xyz, v[0][0].xyzx
            mov o1.xyz, v[0][1].xyzx
            mov o2.xy, v[0][2].xyxx
            mov o2.z, r0.x
            mov o3.x, v[0][3].x
            emit_stream m0
          endif 
        endif 
        ret 
        // Approximately 52 instruction slots used
            
    }
/* Stream out decl: "POSITION.xyz; VELOCITY.xyz; SIZE.xy; AGE.x; TYPE.x" */;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 2 technique(s)
    //
    technique11 StreamOutTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float   xy  
                // AGE                      0     z         2     NONE   float     z 
                // TYPE                     0   x           3     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.z
                dcl_output o3.x
                //
                // Initial variable locations:
                //   v0.x <- vin.InitialPosW.x; v0.y <- vin.InitialPosW.y; v0.z <- vin.InitialPosW.z; 
                //   v1.x <- vin.InitialVelW.x; v1.y <- vin.InitialVelW.y; v1.z <- vin.InitialVelW.z; 
                //   v2.x <- vin.SizeW.x; v2.y <- vin.SizeW.y; 
                //   v3.x <- vin.Age; 
                //   v4.x <- vin.Type; 
                //   o3.x <- <StreamOutVS return value>.Type; 
                //   o2.x <- <StreamOutVS return value>.SizeW.x; o2.y <- <StreamOutVS return value>.SizeW.y; o2.z <- <StreamOutVS return value>.Age; 
                //   o1.x <- <StreamOutVS return value>.InitialVelW.x; o1.y <- <StreamOutVS return value>.InitialVelW.y; o1.z <- <StreamOutVS return value>.InitialVelW.z; 
                //   o0.x <- <StreamOutVS return value>.InitialPosW.x; o0.y <- <StreamOutVS return value>.InitialPosW.y; o0.z <- <StreamOutVS return value>.InitialPosW.z
                //
                #line 101 "D:\Code\Visual Studio\C++ Code\Intro to Graphics\Chapter 20 Particle Systems (Cubed) - Copy\ParticleSystem\FX\Rain.fx"
                mov o0.xyz, v0.xyzx
                mov o1.xyz, v1.xyzx
                mov o2.xy, v2.xyxx
                mov o2.z, v3.x
                mov o3.x, v4.x
                ret 
                // Approximately 6 instruction slots used
                            
            };
            GeometryShader = gsStreamOut;
            PixelShader = NULL;
            DS_StencilRef = uint(0);
            DepthStencilState = DisableDepth;
        }

    }

    technique11 DrawTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12
                //      = 0xbf800000 0xc11ccccd 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbFixed                           cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // VELOCITY                 0   xyz         1     NONE   float   xyz 
                // SIZE                     0   xy          2     NONE   float       
                // AGE                      0   x           3     NONE   float   x   
                // TYPE                     0   x           4     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[1], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v3.x
                dcl_input v4.x
                dcl_output o0.xyz
                dcl_output o1.x
                dcl_temps 2
                //
                // Initial variable locations:
                //   v0.x <- vin.InitialPosW.x; v0.y <- vin.InitialPosW.y; v0.z <- vin.InitialPosW.z; 
                //   v1.x <- vin.InitialVelW.x; v1.y <- vin.InitialVelW.y; v1.z <- vin.InitialVelW.z; 
                //   v2.x <- vin.SizeW.x; v2.y <- vin.SizeW.y; 
                //   v3.x <- vin.Age; 
                //   v4.x <- vin.Type; 
                //   o1.x <- <DrawVS return value>.Type; 
                //   o0.x <- <DrawVS return value>.PosW.x; o0.y <- <DrawVS return value>.PosW.y; o0.z <- <DrawVS return value>.PosW.z
                //
                #line 184 "D:\Code\Visual Studio\C++ Code\Intro to Graphics\Chapter 20 Particle Systems (Cubed) - Copy\ParticleSystem\FX\Rain.fx"
                mov r0.x, v3.x  // r0.x <- t
                
                #line 187
                mul r0.y, r0.x, l(0.500000)
                mul r0.y, r0.x, r0.y
                mul r0.yzw, r0.yyyy, cb0[0].xxyz
                mul r1.xyz, r0.xxxx, v1.xyzx
                add r0.xyz, r0.yzwy, r1.xyzx
                add r0.xyz, r0.xyzx, v0.xyzx  // r0.x <- vout.PosW.x; r0.y <- vout.PosW.y; r0.z <- vout.PosW.z
                mov r0.w, v4.x  // r0.w <- vout.Type
                mov o0.xyz, r0.xyzx
                mov o1.x, r0.w
                ret 
                // Approximately 11 instruction slots used
                            
            };
            GeometryShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float3 gEyePosW;                   // Offset:    0 Size:    12 [unused]
                //   float3 gEmitPosW;                  // Offset:   16 Size:    12 [unused]
                //   float3 gEmitDirW;                  // Offset:   32 Size:    12 [unused]
                //   float gGameTime;                   // Offset:   44 Size:     4 [unused]
                //   float gTimeStep;                   // Offset:   48 Size:     4 [unused]
                //   float4x4 gViewProj;                // Offset:   64 Size:    64
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float3 gAccelW;                    // Offset:    0 Size:    12
                //      = 0xbf800000 0xc11ccccd 0x00000000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // TYPE                     0   x           1     NONE    uint   x   
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                gs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[8], immediateIndexed
                dcl_constantbuffer cb1[1], immediateIndexed
                dcl_input v[1][0].xyz
                dcl_input v[1][1].x
                dcl_temps 3
                dcl_inputprimitive point 
                dcl_stream m0
                dcl_outputtopology linestrip 
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_maxout 2
                //
                // Initial variable locations:
                //   m0 <- lineStream; 
                //   v[0][0].x <- gin[0].PosW.x; v[0][0].y <- gin[0].PosW.y; v[0][0].z <- gin[0].PosW.z; 
                //   v[0][1].x <- gin[0].Type
                //
                #line 206 "D:\Code\Visual Studio\C++ Code\Intro to Graphics\Chapter 20 Particle Systems (Cubed) - Copy\ParticleSystem\FX\Rain.fx"
                if_nz v[0][1].x
                
                #line 209
                  mov r0.xyz, v[0][0].xyzx  // r0.x <- p0.x; r0.y <- p0.y; r0.z <- p0.z
                  mul r1.xyz, cb1[0].xyzx, l(0.070000, 0.070000, 0.070000, 0.000000)
                  add r1.xyz, r1.xyzx, v[0][0].xyzx  // r1.x <- p1.x; r1.y <- p1.y; r1.z <- p1.z
                
                #line 213
                  mov r0.w, l(1.000000)
                  dp4 r2.x, r0.xyzw, cb0[4].xyzw  // r2.x <- v0.PosH.x
                  dp4 r2.y, r0.xyzw, cb0[5].xyzw  // r2.y <- v0.PosH.y
                  dp4 r2.z, r0.xyzw, cb0[6].xyzw  // r2.z <- v0.PosH.z
                  dp4 r2.w, r0.xyzw, cb0[7].xyzw  // r2.w <- v0.PosH.w
                  mov r0.xy, l(0,0,0,0)  // r0.x <- v0.Tex.x; r0.y <- v0.Tex.y
                  mov o0.xyzw, r2.xyzw
                  mov o1.xy, r0.xyxx
                  emit_stream m0
                
                #line 218
                  mov r1.w, l(1.000000)
                  dp4 r0.x, r1.xyzw, cb0[4].xyzw  // r0.x <- v1.PosH.x
                  dp4 r0.y, r1.xyzw, cb0[5].xyzw  // r0.y <- v1.PosH.y
                  dp4 r0.z, r1.xyzw, cb0[6].xyzw  // r0.z <- v1.PosH.z
                  dp4 r0.w, r1.xyzw, cb0[7].xyzw  // r0.w <- v1.PosH.w
                  mov r1.xy, l(1.000000,1.000000,0,0)  // r1.x <- v1.Tex.x; r1.y <- v1.Tex.y
                  mov o0.xyzw, r0.xyzw
                  mov o1.xy, r1.xyxx
                  emit_stream m0
                endif 
                ret 
                // Approximately 24 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.30.9200.16384
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // gTexArray                         texture  float4     2darray    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Position              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_TARGET                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_sampler s0, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 1
                //
                // Initial variable locations:
                //   v0.x <- pin.PosH.x; v0.y <- pin.PosH.y; v0.z <- pin.PosH.z; v0.w <- pin.PosH.w; 
                //   v1.x <- pin.Tex.x; v1.y <- pin.Tex.y; 
                //   o0.x <- <DrawPS return value>.x; o0.y <- <DrawPS return value>.y; o0.z <- <DrawPS return value>.z; o0.w <- <DrawPS return value>.w
                //
                #line 226 "D:\Code\Visual Studio\C++ Code\Intro to Graphics\Chapter 20 Particle Systems (Cubed) - Copy\ParticleSystem\FX\Rain.fx"
                itof r0.z, l(0)
                mov r0.xy, v1.xyxx
                sample_indexable(texture2darray)(float,float,float,float) o0.xyzw, r0.xyzx, t0.xyzw, s0
                ret 
                // Approximately 4 instruction slots used
                            
            };
            DS_StencilRef = uint(0);
            DepthStencilState = NoDepthWrites;
        }

    }

}

