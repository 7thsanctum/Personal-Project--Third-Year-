//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    DirectionalLight gDirLights[3];     // Offset:    0, size:  192
    float3  gEyePosW;                   // Offset:  192, size:   12
    float   gFogStart;                  // Offset:  204, size:    4
    float   gFogRange;                  // Offset:  208, size:    4
    float4  gFogColor;                  // Offset:  224, size:   16
    float   gMinDist;                   // Offset:  240, size:    4
    float   gMaxDist;                   // Offset:  244, size:    4
    float   gMinTess;                   // Offset:  248, size:    4
    float   gMaxTess;                   // Offset:  252, size:    4
    float   gTexelCellSpaceU;           // Offset:  256, size:    4
    float   gTexelCellSpaceV;           // Offset:  260, size:    4
    float   gWorldCellSpace;            // Offset:  264, size:    4
    float2  gTexScale = { 50 };         // Offset:  272, size:    8
    float4  gWorldFrustumPlanes[6];     // Offset:  288, size:   96
}

cbuffer cbPerObject
{
    float4x4 gViewProj;                 // Offset:    0, size:   64
    Material gMaterial;                 // Offset:   64, size:   64
}

//
// 5 local object(s)
//
Texture2DArray gLayerMapArray;
Texture2D gBlendMap;
Texture2D gHeightMap;
SamplerState samLinear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samHeightmap
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(CLAMP /* 3 */);
    AddressV = uint(CLAMP /* 3 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 10
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r6.xyz, -r9.xyzx
                dp3 r6.w, r6.xyzx, r0.xyzx
                add r6.w, r6.w, r6.w
                mov r6.w, -r6.w
                mul r0.xyz, r0.xyzx, r6.wwww
                add r0.xyz, r6.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r4.xyzw, r4.xyzw, r0.wwww
                mul r4.xyzw, r7.xyzw, r4.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r0.xyzw, r5.xyzw, r0.xxxx
                mul r0.xyzw, r8.xyzw, r0.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r4.xyzw, r1.wwww, r4.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r0.xyzw, r1.wwww, r0.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xyzw, r4.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.xyzw, r0.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r1.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r3.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r0.xyzw, r0.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 118 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 13
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r6.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r9.w, r9.xyzx, r0.xyzx
                add r9.w, r9.w, r9.w
                mov r9.w, -r9.w
                mul r10.xyz, r0.xyzx, r9.wwww
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r9.x, r9.xyzx, r1.xyzx
                max r9.x, r9.x, l(0.000000)
                log r9.x, r9.x
                mul r9.x, r5.w, r9.x
                exp r9.x, r9.x  // specFactor<0:NaN:Inf>
                mul r10.xyzw, r4.xyzw, r0.wwww
                mul r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r9.xyzw, r5.xyzw, r9.xxxx
                mul r8.xyzw, r8.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r7.xyzw, r1.wwww, r7.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r6.xyzw, r6.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r7.xyzw, r7.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r8.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[7].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r9.w, r9.xyzx, r0.xyzx
                add r9.w, r9.w, r9.w
                mov r9.w, -r9.w
                mul r0.xyz, r0.xyzx, r9.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r4.xyzw, r4.xyzw, r0.wwww
                mul r4.xyzw, r10.xyzw, r4.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r0.xyzw, r5.xyzw, r0.xxxx
                mul r0.xyzw, r11.xyzw, r0.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r4.xyzw, r1.wwww, r4.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r0.xyzw, r1.wwww, r0.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xyzw, r4.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.xyzw, r0.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r1.xyzw, r3.xyzw, r6.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r3.xyzw, r4.xyzw, r7.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r0.xyzw, r0.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 150 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 14
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r6.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r9.xyzx
                dp3 r9.w, r9.xyzx, r0.xyzx
                add r9.w, r9.w, r9.w
                mov r9.w, -r9.w
                mul r10.xyz, r0.xyzx, r9.wwww
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r9.x, r9.xyzx, r1.xyzx
                max r9.x, r9.x, l(0.000000)
                log r9.x, r9.x
                mul r9.x, r5.w, r9.x
                exp r9.x, r9.x  // specFactor<0:NaN:Inf>
                mul r10.xyzw, r4.xyzw, r0.wwww
                mul r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r9.xyzw, r5.xyzw, r9.xxxx
                mul r8.xyzw, r8.xyzw, r9.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r7.xyzw, r1.wwww, r7.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r8.xyzw, r1.wwww, r8.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r6.xyzw, r6.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r7.xyzw, r7.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r8.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[7].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r9.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r12.xyz, -r12.xyzx
                dp3 r12.w, r12.xyzx, r0.xyzx
                add r12.w, r12.w, r12.w
                mov r12.w, -r12.w
                mul r13.xyz, r0.xyzx, r12.wwww
                add r12.xyz, r12.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r12.x, r12.xyzx, r1.xyzx
                max r12.x, r12.x, l(0.000000)
                log r12.x, r12.x
                mul r12.x, r5.w, r12.x
                exp r12.x, r12.x  // specFactor<0:NaN:Inf>
                mul r13.xyzw, r4.xyzw, r0.wwww
                mul r10.xyzw, r10.xyzw, r13.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r12.xyzw, r5.xyzw, r12.xxxx
                mul r11.xyzw, r11.xyzw, r12.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r10.xyzw, r1.wwww, r10.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r11.xyzw, r1.wwww, r11.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r9.xyzw, r9.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r10.xyzw, r10.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r11.xyzw, r11.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, r9.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[11].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r0.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r1.w, l(0.000000), r0.w
                mov r9.xyz, -r12.xyzx
                dp3 r9.w, r9.xyzx, r0.xyzx
                add r9.w, r9.w, r9.w
                mov r9.w, -r9.w
                mul r0.xyz, r0.xyzx, r9.wwww
                add r0.xyz, r9.xyzx, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r4.xyzw, r4.xyzw, r0.wwww
                mul r4.xyzw, r10.xyzw, r4.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r0.xyzw, r5.xyzw, r0.xxxx
                mul r0.xyzw, r11.xyzw, r0.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r4.xyzw, r1.wwww, r4.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r0.xyzw, r1.wwww, r0.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xyzw, r4.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r0.xyzw, r0.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r1.xyzw, r3.xyzw, r6.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r3.xyzw, r4.xyzw, r7.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r0.xyzw, r0.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 182 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 10
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r6.x, l(0.000000), r1.w
                mov r6.yzw, -r9.xxyz
                dp3 r9.x, r6.yzwy, r0.xyzx
                add r9.x, r9.x, r9.x
                mov r9.x, -r9.x
                mul r0.xyz, r0.xyzx, r9.xxxx
                add r0.xyz, r6.yzwy, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyzw, r4.xyzw, r1.wwww
                mul r1.xyzw, r7.xyzw, r1.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r4.xyzw, r5.xyzw, r0.xxxx
                mul r4.xyzw, r8.xyzw, r4.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r1.xyzw, r6.xxxx, r1.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r4.xyzw, r6.xxxx, r4.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyzw, r1.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r4.xyzw, r4.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r3.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r4.xyzw, r4.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r4.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 361
                mov r0.x, -cb0[12].w
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 364
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[14].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 127 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 13
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r6.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r9.w, l(0.000000), r1.w
                mov r9.xyz, -r9.xyzx
                dp3 r10.x, r9.xyzx, r0.xyzx
                add r10.x, r10.x, r10.x
                mov r10.x, -r10.x
                mul r10.xyz, r0.xyzx, r10.xxxx
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r9.x, r9.xyzx, r1.xyzx
                max r9.x, r9.x, l(0.000000)
                log r9.x, r9.x
                mul r9.x, r5.w, r9.x
                exp r9.x, r9.x  // specFactor<0:NaN:Inf>
                mul r10.xyzw, r4.xyzw, r1.wwww
                mul r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r10.xyzw, r5.xyzw, r9.xxxx
                mul r8.xyzw, r8.xyzw, r10.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r7.xyzw, r9.wwww, r7.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r8.xyzw, r9.wwww, r8.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r6.xyzw, r6.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r7.xyzw, r7.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r8.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[7].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r9.x, l(0.000000), r1.w
                mov r9.yzw, -r12.xxyz
                dp3 r12.x, r9.yzwy, r0.xyzx
                add r12.x, r12.x, r12.x
                mov r12.x, -r12.x
                mul r0.xyz, r0.xyzx, r12.xxxx
                add r0.xyz, r9.yzwy, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyzw, r4.xyzw, r1.wwww
                mul r1.xyzw, r10.xyzw, r1.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r4.xyzw, r5.xyzw, r0.xxxx
                mul r4.xyzw, r11.xyzw, r4.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r1.xyzw, r9.xxxx, r1.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r4.xyzw, r9.xxxx, r4.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyzw, r1.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r4.xyzw, r4.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r3.xyzw, r3.xyzw, r6.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r1.xyzw, r1.xyzw, r7.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r4.xyzw, r4.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r4.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 361
                mov r0.x, -cb0[12].w
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 364
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[14].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 159 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input v0.xz
                dcl_input v1.xy
                dcl_input v2.xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_temps 2
                
                #line 82 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, v0.xzxx  // vout<0,2>
                
                #line 86
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, v1.xyxx, t0.yzxw, s0, l(0.000000)
                mov r0.z, r0.z  // vout<1:Inf>
                
                #line 89
                mov r1.xy, v1.xyxx  // vout<3,4>
                mov r1.zw, v2.xxxy  // vout<5,6>
                mov o1.xy, r1.xyxx  // VS<3,4>
                mov o1.zw, r1.zzzw  // VS<5,6>
                mov o0.xz, r0.xxyx  // VS<0,2>
                mov o0.y, r0.z  // VS<1:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
            HullShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4
                //   float gMaxDist;                    // Offset:  244 Size:     4
                //   float gMinTess;                    // Offset:  248 Size:     4
                //   float gMaxTess;                    // Offset:  252 Size:     4
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float   x   
                // SV_TessFactor            1   x           1 QUADEDGE  float   x   
                // SV_TessFactor            2   x           2 QUADEDGE  float   x   
                // SV_TessFactor            3   x           3 QUADEDGE  float   x   
                // SV_InsideTessFactor      0   x           4  QUADINT  float   x   
                // SV_InsideTessFactor      1   x           5  QUADINT  float   x   
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                // TEXCOORD                 1     zw        1     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                // Tessellation Output Primitive  Partitioning Type 
                // ------------------------------ ------------------
                // Clockwise Triangles            Even Fractional   
                //
                hs_5_0
                hs_decls 
                dcl_input_control_point_count 4
                dcl_output_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_tessellator_partitioning partitioning_fractional_even
                dcl_tessellator_output_primitive output_triangle_cw
                dcl_hs_max_tessfactor l(64.000000)
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[24], dynamicIndexed
                
                #line 224 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                hs_control_point_phase 
                dcl_input vOutputControlPointID
                dcl_input v[4][0].xyz
                dcl_input v[4][1].xy
                dcl_output o0.xyz
                dcl_output o1.xy
                dcl_temps 2
                mov r0.x, vOutputControlPointID  // hout<0,1,2>
                mov r0.yzw, v[r0.x + 0][0].xxyz  // hout<3,4>
                mov r1.xy, v[r0.x + 0][1].xyxx  // HS<0,1,2>
                mov o0.xyz, r0.yzwy  // HS<3,4>
                mov o1.xy, r1.xyxx
                
                #line 155
                ret   // minY<0>
                hs_join_phase   // maxY<0>
                dcl_input vicp[4][0].xyz
                dcl_input vicp[4][1].zw
                dcl_output_siv o0.x, finalQuadUeq0EdgeTessFactor
                dcl_output_siv o1.x, finalQuadVeq0EdgeTessFactor
                dcl_output_siv o2.x, finalQuadUeq1EdgeTessFactor
                dcl_output_siv o3.x, finalQuadVeq1EdgeTessFactor
                dcl_output_siv o4.x, finalQuadUInsideTessFactor
                dcl_output_siv o5.x, finalQuadVInsideTessFactor
                dcl_temps 7
                
                #line 160
                mov r0.y, vicp[0][1].z  // vMin<0,2>
                mov r1.y, vicp[0][1].w  // vMin<1>
                mov r0.xz, vicp[2][0].xxzx  // vMax<0,2>
                mov r0.y, r0.y  // vMax<1>
                mov r1.xz, vicp[1][0].xxzx
                mov r1.y, r1.y  // boxCenter<0,1,2>
                add r2.xyz, r0.xyzx, r1.xyzx
                mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                mov r0.xyz, -r0.xyzx  // boxExtents<0,1,2>
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // center<0,1,2>
                nop   // extents<0,1,2>
                
                #line 127
                mov r2.xyz, r2.xyzx  // i<0: 0>
                mov r0.xyz, r0.xyzx  // AabbOutsideFrustumTest<0: false>
                mov r0.w, l(0)  // i<0>
                mov r1.x, l(0)
                mov r1.y, r0.w
                mov r1.z, l(0)
                loop 
                  ilt r1.w, r1.y, l(6)
                
                #line 131
                  mov r1.z, l(0)
                  breakc_z r1.w  // center<0,1,2>
                  nop   // extents<0,1,2>
                  mov r3.xyz, r2.xyzx
                  mov r4.xyz, r0.xyzx  // plane<0,1,2,3>
                
                #line 110
                  mov r1.w, r1.y
                  mov r5.xyzw, cb0[r1.w + 18].xyzw  // n<0:[0f,3.40282e+038f],1:[0f,3.40282e+038f],2:[0f,3.40282e+038f]>
                
                #line 113
                  mov r6.xyz, -r5.xyzx  // r<0:NaN:Inf>
                
                #line 116
                  max r6.xyz, r5.xyzx, r6.xyzx
                  dp3 r1.w, r4.xyzx, r6.xyzx  // s<0:NaN:Inf>
                
                #line 121
                  mov r3.w, l(1.000000)
                  dp4 r2.w, r3.xyzw, r5.xyzw  // AabbBehindPlaneTest<0>
                
                #line 131
                  add r1.w, r1.w, r2.w
                  lt r1.w, r1.w, l(0.000000)  // AabbOutsideFrustumTest<0: true>
                  if_nz r1.w
                    mov r1.x, l(-1)
                    mov r1.z, l(-1)
                
                #line 127
                    break   // i<0>
                  endif 
                  iadd r1.y, r1.y, l(1)
                
                #line 137
                  mov r1.z, r1.w
                endloop   // AabbOutsideFrustumTest<0: false>
                if_z r1.z
                
                #line 165
                  mov r1.x, l(0)
                
                #line 175
                endif   // ConstantHS<0: 0f>
                if_nz r1.x  // ConstantHS<1: 0f>
                  mov o0.x, l(0)  // ConstantHS<2: 0f>
                  mov o1.x, l(0)  // ConstantHS<3: 0f>
                  mov o2.x, l(0)  // ConstantHS<4: 0f>
                  mov o3.x, l(0)  // ConstantHS<5: 0f>
                  mov o4.x, l(0)
                
                #line 165
                  mov o5.x, l(0)
                
                #line 187
                  ret 
                else   // e0<0,1,2>
                  add r0.xyz, vicp[2][0].xyzx, vicp[0][0].xyzx
                  mul r0.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e1<0,1,2>
                  add r1.xyz, vicp[1][0].xyzx, vicp[0][0].xyzx
                  mul r2.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e2<0,1,2>
                  add r3.xyz, vicp[3][0].xyzx, vicp[1][0].xyzx
                  mul r3.xyz, r3.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // e3<0,1,2>
                  add r4.xyz, vicp[3][0].xyzx, vicp[2][0].xyzx
                  mul r4.xyz, r4.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
                  add r1.xyz, r1.xyzx, vicp[2][0].xyzx  // c<0,1,2>
                  add r1.xyz, r1.xyzx, vicp[3][0].xyzx
                  mul r1.xyz, r1.xyzx, l(0.250000, 0.250000, 0.250000, 0.000000)  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r0.xyz, r0.xyzx
                  mov r5.xyz, -cb0[12].xyzx
                  add r0.xyz, r0.xyzx, r5.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r0.x, r0.xyzx, r0.xyzx
                  sqrt r0.x, r0.x
                  mov r0.y, -cb0[15].x
                  add r0.x, r0.y, r0.x
                  add r0.z, r0.y, cb0[15].y
                  div r0.x, r0.x, r0.z  // s<0:[0f,1f]>
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)
                  mov r0.w, -cb0[15].w
                  add r0.w, r0.w, cb0[15].z
                  mul r0.x, r0.w, r0.x
                  add r0.x, r0.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 193
                  mul r0.x, r0.x, l(1.000000)  // pt<0:NaN:Inf>
                  exp r0.x, r0.x
                  mov r0.x, r0.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r2.xyz, r2.xyzx
                  add r2.xyz, r5.xyzx, r2.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.w, r2.xyzx, r2.xyzx
                  sqrt r1.w, r1.w
                  add r1.w, r0.y, r1.w
                  div r1.w, r1.w, r0.z  // s<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r1.w, r0.w, r1.w
                  add r1.w, r1.w, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 194
                  mul r1.w, r1.w, l(1.000000)  // pt<1:NaN:Inf>
                  exp r1.w, r1.w
                  mov r1.w, r1.w  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r3.xyz, r3.xyzx
                  add r2.xyz, r5.xyzx, r3.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r2.x, r2.xyzx, r2.xyzx
                  sqrt r2.x, r2.x
                  add r2.x, r0.y, r2.x
                  div r2.x, r2.x, r0.z  // s<0:[0f,1f]>
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)
                  mul r2.x, r0.w, r2.x
                  add r2.x, r2.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 195
                  mul r2.x, r2.x, l(1.000000)  // pt<2:NaN:Inf>
                  exp r2.x, r2.x
                  mov r2.x, r2.x  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r4.xyz, r4.xyzx
                  add r3.xyz, r5.xyzx, r4.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r3.x, r3.xyzx, r3.xyzx
                  sqrt r3.x, r3.x
                  add r3.x, r0.y, r3.x
                  div r3.x, r3.x, r0.z  // s<0:[0f,1f]>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)
                  mul r3.x, r0.w, r3.x
                  add r3.x, r3.x, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 196
                  mul r3.x, r3.x, l(1.000000)  // pt<3:NaN:Inf>
                  exp r2.y, r3.x
                  mov r2.y, r2.y  // p<0,1,2>
                
                #line 97
                  nop 
                  mov r1.xyz, r1.xyzx
                  add r1.xyz, r5.xyzx, r1.xyzx  // d<0:NaN:Inf>
                
                #line 102
                  dp3 r1.x, r1.xyzx, r1.xyzx
                  sqrt r1.x, r1.x
                  add r0.y, r0.y, r1.x
                  div r0.y, r0.y, r0.z  // s<0:[0f,1f]>
                  max r0.y, r0.y, l(0.000000)
                  min r0.y, r0.y, l(1.000000)
                  mul r0.y, r0.w, r0.y
                  add r0.y, r0.y, cb0[15].w  // CalcTessFactor<0:NaN:Inf>
                
                #line 198
                  mul r0.y, r0.y, l(1.000000)  // pt<4:NaN:Inf>
                
                #line 201
                  exp r2.w, r0.y  // ConstantHS<2:NaN:Inf>
                  mov r2.z, r2.w  // ConstantHS<3:NaN:Inf>
                  mov r2.x, r2.x  // ConstantHS<4:NaN:Inf>
                  mov r2.y, r2.y  // ConstantHS<5:NaN:Inf>
                  mov r2.z, r2.z  // ConstantHS<0:NaN:Inf>
                  mov r2.w, r2.w  // ConstantHS<1:NaN:Inf>
                  mov r0.x, r0.x  // ConstantHS<0:[0f,64f]>
                  mov r1.w, r1.w  // ConstantHS<1:[0f,64f]>
                  min o0.x, r0.x, l(64.000000)  // ConstantHS<2:[0f,64f],3:[0f,64f],4:[0f,64f],5:[0f,64f]>
                  min o1.x, r1.w, l(64.000000)  // ConstantHS<2:[0f,64f]>
                  min r0.xyzw, r2.xyzw, l(64.000000, 64.000000, 64.000000, 64.000000)  // ConstantHS<3:[0f,64f]>
                  mov o2.x, r0.x  // ConstantHS<4:[0f,64f]>
                  mov o3.x, r0.y  // ConstantHS<5:[0f,64f]>
                  mov o4.x, r0.z
                
                #line 165
                  mov o5.x, r0.w
                  ret 
                
                // incorrect instruction offset in debug info
                endif 
                // incorrect instruction offset in debug info
                
                
                // incorrect instruction offset in debug info
                ret 
                // incorrect instruction offset in debug info
                
                // Approximately 162 instruction slots used
                            
            };
            DomainShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192 [unused]
                //   float3 gEyePosW;                   // Offset:  192 Size:    12 [unused]
                //   float gFogStart;                   // Offset:  204 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  208 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  224 Size:    16 [unused]
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4 [unused]
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4 [unused]
                //   float gWorldCellSpace;             // Offset:  264 Size:     4 [unused]
                //   float2 gTexScale;                  // Offset:  272 Size:     8
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samHeightmap                      sampler      NA          NA    0        1
                // gHeightMap                        texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Patch Constant signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_TessFactor            0   x           0 QUADEDGE  float       
                // SV_TessFactor            1   x           1 QUADEDGE  float       
                // SV_TessFactor            2   x           2 QUADEDGE  float       
                // SV_TessFactor            3   x           3 QUADEDGE  float       
                // SV_InsideTessFactor      0   x           4  QUADINT  float       
                // SV_InsideTessFactor      1   x           5  QUADINT  float       
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   x z 
                // TEXCOORD                 0   xy          1     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                // Tessellation Domain   # of control points
                // -------------------- --------------------
                // Quadrilateral                           4
                //
                ds_5_0
                dcl_input_control_point_count 4
                dcl_tessellator_domain domain_quad
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[18], immediateIndexed
                dcl_constantbuffer cb1[4], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input vDomain.xy
                dcl_input vicp[4][0].xz
                dcl_input vicp[4][1].xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xy
                dcl_output o2.zw
                dcl_temps 4
                
                #line 250 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.xy, -vicp[0][0].xzxx
                add r0.xy, r0.xyxx, vicp[1][0].xzxx
                mul r0.xy, r0.xyxx, vDomain.xxxx
                add r0.xy, r0.xyxx, vicp[0][0].xzxx
                mov r0.zw, -vicp[2][0].xxxz
                add r0.zw, r0.zzzw, vicp[3][0].xxxz
                mul r0.zw, r0.zzzw, vDomain.xxxx
                add r0.zw, r0.zzzw, vicp[2][0].xxxz
                mov r1.xy, -r0.xyxx
                add r0.zw, r0.zzzw, r1.xxxy
                mul r0.zw, r0.zzzw, vDomain.yyyy
                add r0.xz, r0.zzwz, r0.xxyx  // dout<4:NaN:Inf,6:NaN:Inf>
                mov r1.xy, r0.xzxx  // dout<4:NaN:Inf,6:NaN:Inf>
                
                #line 255
                mov r1.zw, -vicp[0][1].xxxy
                add r1.zw, r1.zzzw, vicp[1][1].xxxy
                mul r1.zw, r1.zzzw, vDomain.xxxx
                add r1.zw, r1.zzzw, vicp[0][1].xxxy
                mov r2.xy, -vicp[2][1].xyxx
                add r2.xy, r2.xyxx, vicp[3][1].xyxx
                mul r2.xy, r2.xyxx, vDomain.xxxx
                add r2.xy, r2.xyxx, vicp[2][1].xyxx
                mov r2.zw, -r1.zzzw
                add r2.xy, r2.zwzz, r2.xyxx
                mul r2.xy, r2.xyxx, vDomain.yyyy
                add r1.zw, r1.zzzw, r2.xxxy  // dout<7:NaN:Inf,8:NaN:Inf>
                
                #line 259
                mul r2.xy, r1.zwzz, cb0[17].xyxx  // dout<9:NaN:Inf,10:NaN:Inf>
                
                #line 262
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r1.zwzz, t0.yxzw, s0, l(0.000000)  // dout<5:Inf>
                mov r2.z, r0.y  // dout<5:Inf>
                
                #line 270
                mov r0.w, l(1.000000)
                dp4 r3.x, r0.xyzw, cb1[0].xyzw  // dout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb1[1].xyzw  // dout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb1[2].xyzw  // dout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb1[3].xyzw  // dout<3:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // DS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o2.xy, r1.zwzz  // DS<7:NaN:Inf,8:NaN:Inf>
                mov o2.zw, r2.xxxy  // DS<9:NaN:Inf,10:NaN:Inf>
                mov o1.xz, r1.xxyx  // DS<4:NaN:Inf,6:NaN:Inf>
                mov o1.y, r2.z  // DS<5:Inf>
                ret 
                // Approximately 39 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct DirectionalLight
                //   {
                //       
                //       float4 Ambient;                // Offset:    0
                //       float4 Diffuse;                // Offset:   16
                //       float4 Specular;               // Offset:   32
                //       float3 Direction;              // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gDirLights[3];                   // Offset:    0 Size:   192
                //   float3 gEyePosW;                   // Offset:  192 Size:    12
                //   float gFogStart;                   // Offset:  204 Size:     4
                //   float gFogRange;                   // Offset:  208 Size:     4
                //   float4 gFogColor;                  // Offset:  224 Size:    16
                //   float gMinDist;                    // Offset:  240 Size:     4 [unused]
                //   float gMaxDist;                    // Offset:  244 Size:     4 [unused]
                //   float gMinTess;                    // Offset:  248 Size:     4 [unused]
                //   float gMaxTess;                    // Offset:  252 Size:     4 [unused]
                //   float gTexelCellSpaceU;            // Offset:  256 Size:     4
                //   float gTexelCellSpaceV;            // Offset:  260 Size:     4
                //   float gWorldCellSpace;             // Offset:  264 Size:     4
                //   float2 gTexScale;                  // Offset:  272 Size:     8 [unused]
                //      = 0x42480000 0x42480000 
                //   float4 gWorldFrustumPlanes[6];     // Offset:  288 Size:    96 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gViewProj;                // Offset:    0 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:   64
                //       float4 Diffuse;                // Offset:   80
                //       float4 Specular;               // Offset:   96
                //       float4 Reflect;                // Offset:  112
                //
                //   } gMaterial;                       // Offset:   64 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samLinear                         sampler      NA          NA    0        1
                // samHeightmap                      sampler      NA          NA    1        1
                // gLayerMapArray                    texture  float4     2darray    0        1
                // gBlendMap                         texture  float4          2d    1        1
                // gHeightMap                        texture  float4          2d    2        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                // TEXCOORD                 1     zw        2     NONE  float     zw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_constantbuffer cb1[7], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texture2darray (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xy
                dcl_input_ps linear v2.zw
                dcl_output o0.xyzw
                dcl_temps 14
                
                #line 282 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r0.x, -cb0[16].x
                mov r0.y, l(0)
                add r0.xy, r0.xyxx, v2.xyxx  // leftTex<0:Inf,1>
                mov r1.x, cb0[16].x
                mov r1.y, l(0)
                add r0.zw, r1.xxxy, v2.xxxy  // rightTex<0:Inf,1>
                mov r1.x, l(0)
                mov r1.y, cb0[16].y
                add r1.xy, r1.xyxx, v2.xyxx  // bottomTex<0,1:Inf>
                mov r2.x, l(0)
                mov r2.y, -cb0[16].y
                add r1.zw, r2.xxxy, v2.xxxy  // topTex<0,1:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.x, r0.xyxx, t2.xyzw, s1, l(0.000000)
                mov r0.x, r0.x  // leftY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.y, r0.zwzz, t2.yxzw, s1, l(0.000000)
                mov r0.y, r0.y  // rightY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.z, r1.xyxx, t2.yzxw, s1, l(0.000000)
                mov r0.z, r0.z  // bottomY<0:Inf>
                sample_l_indexable(texture2d)(float,float,float,float) r0.w, r1.zwzz, t2.yzwx, s1, l(0.000000)
                mov r0.w, r0.w  // topY<0:Inf>
                mov r0.x, -r0.x
                add r1.z, r0.x, r0.y
                mul r1.y, cb0[16].z, l(2.000000)
                mov r1.x, l(0)
                dp3 r0.x, r1.xyzx, r1.xyzx
                rsq r0.x, r0.x
                mul r1.xyz, r0.xxxx, r1.xyzx  // tangent<2: 0f,0:NaN:Inf,1:NaN:Inf>
                
                #line 293
                mov r0.x, -r0.w
                add r0.x, r0.x, r0.z
                mov r0.z, l(0)
                mul r0.y, cb0[16].z, l(-2.000000)
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // bitan<1:NaN:Inf,2:NaN:Inf,0: 0f>
                mul r2.xyz, r0.yzxy, r1.zxyz
                mul r0.xyz, r0.xyzx, r1.xyzx
                mov r0.xyz, -r0.xyzx
                add r0.xyz, r0.xyzx, r2.xyzx  // normalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 298
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[12].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 301
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 304
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 311
                mov r2.xy, v2.zwzz
                mov r2.z, l(0)
                sample_indexable(texture2darray)(float,float,float,float) r2.xyzw, r2.xyzx, t0.xyzw, s0  // c0<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r3.xy, v2.zwzz
                mov r3.z, l(1.000000)
                sample_indexable(texture2darray)(float,float,float,float) r3.xyzw, r3.xyzx, t0.xyzw, s0  // c1<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r4.xy, v2.zwzz
                mov r4.z, l(2.000000)
                sample_indexable(texture2darray)(float,float,float,float) r4.xyzw, r4.xyzx, t0.xyzw, s0  // c2<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r5.xy, v2.zwzz
                mov r5.z, l(3.000000)
                sample_indexable(texture2darray)(float,float,float,float) r5.xyzw, r5.xyzx, t0.xyzw, s0  // c3<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r6.xy, v2.zwzz
                mov r6.z, l(4.000000)
                sample_indexable(texture2darray)(float,float,float,float) r6.xyzw, r6.xyzx, t0.xyzw, s0  // c4<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 318
                sample_indexable(texture2d)(float,float,float,float) r7.xyzw, v2.xyxx, t1.xyzw, s0  // t<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 321
                mov r2.xyzw, r2.xyzw  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r8.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r8.xyzw
                mul r3.xyzw, r3.xyzw, r7.xxxx
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r4.xyzw
                mul r3.xyzw, r3.xyzw, r7.yyyy
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r5.xyzw
                mul r3.xyzw, r3.xyzw, r7.zzzz
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r3.xyzw, -r2.xyzw
                add r3.xyzw, r3.xyzw, r6.xyzw
                mul r3.xyzw, r3.xyzw, r7.wwww
                add r2.xyzw, r2.xyzw, r3.xyzw  // texColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r3.xyzw, cb1[4].xyzw  // mat<0,1,2,3>
                mov r4.xyzw, cb1[5].xyzw  // mat<4,5,6,7>
                mov r5.xyzw, cb1[6].xyzw  // mat<8,9,10,11>
                mov r6.xyzw, cb0[0].xyzw  // L<0,1,2,3>
                mov r7.xyzw, cb0[1].xyzw  // L<4,5,6,7>
                mov r8.xyzw, cb0[2].xyzw  // L<8,9,10,11>
                mov r9.xyz, cb0[3].xyzx  // L<12,13,14>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 70 "LightHelper.fx"
                mov r9.xyz, -r9.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r6.xyzw, r3.xyzw, r6.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r9.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r9.w, l(0.000000), r1.w
                mov r9.xyz, -r9.xyzx
                dp3 r10.x, r9.xyzx, r0.xyzx
                add r10.x, r10.x, r10.x
                mov r10.x, -r10.x
                mul r10.xyz, r0.xyzx, r10.xxxx
                add r9.xyz, r9.xyzx, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r9.x, r9.xyzx, r1.xyzx
                max r9.x, r9.x, l(0.000000)
                log r9.x, r9.x
                mul r9.x, r5.w, r9.x
                exp r9.x, r9.x  // specFactor<0:NaN:Inf>
                mul r10.xyzw, r4.xyzw, r1.wwww
                mul r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r10.xyzw, r5.xyzw, r9.xxxx
                mul r8.xyzw, r8.xyzw, r10.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r7.xyzw, r9.wwww, r7.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r8.xyzw, r9.wwww, r8.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r6.xyzw, r6.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r7.xyzw, r7.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r8.xyzw, r8.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                add r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[4].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[5].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[6].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[7].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r9.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r12.w, l(0.000000), r1.w
                mov r12.xyz, -r12.xyzx
                dp3 r13.x, r12.xyzx, r0.xyzx
                add r13.x, r13.x, r13.x
                mov r13.x, -r13.x
                mul r13.xyz, r0.xyzx, r13.xxxx
                add r12.xyz, r12.xyzx, r13.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r12.x, r12.xyzx, r1.xyzx
                max r12.x, r12.x, l(0.000000)
                log r12.x, r12.x
                mul r12.x, r5.w, r12.x
                exp r12.x, r12.x  // specFactor<0:NaN:Inf>
                mul r13.xyzw, r4.xyzw, r1.wwww
                mul r10.xyzw, r10.xyzw, r13.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r13.xyzw, r5.xyzw, r12.xxxx
                mul r11.xyzw, r11.xyzw, r13.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r10.xyzw, r12.wwww, r10.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r11.xyzw, r12.wwww, r11.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r9.xyzw, r9.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r10.xyzw, r10.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r11.xyzw, r11.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r6.xyzw, r6.xyzw, r9.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r7.xyzw, r7.xyzw, r10.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r8.xyzw, r8.xyzw, r11.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344
                nop 
                mov r9.xyzw, cb0[8].xyzw  // L<0,1,2,3>
                mov r10.xyzw, cb0[9].xyzw  // L<4,5,6,7>
                mov r11.xyzw, cb0[10].xyzw  // L<8,9,10,11>
                mov r12.xyz, cb0[11].xyzx  // L<12,13,14>
                
                #line 70 "LightHelper.fx"
                mov r12.xyz, -r12.xyzx  // lightVec<0,1,2>
                
                #line 73
                mul r3.xyzw, r3.xyzw, r9.xyzw  // ambient<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 78
                dp3 r1.w, r12.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                
                #line 82
                lt r9.x, l(0.000000), r1.w
                mov r9.yzw, -r12.xxyz
                dp3 r12.x, r9.yzwy, r0.xyzx
                add r12.x, r12.x, r12.x
                mov r12.x, -r12.x
                mul r0.xyz, r0.xyzx, r12.xxxx
                add r0.xyz, r9.yzwy, r0.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r0.xyzx, r1.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, r5.w
                exp r0.x, r0.x  // specFactor<0:NaN:Inf>
                mul r1.xyzw, r4.xyzw, r1.wwww
                mul r1.xyzw, r10.xyzw, r1.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mul r4.xyzw, r5.xyzw, r0.xxxx
                mul r4.xyzw, r11.xyzw, r4.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 82
                movc r1.xyzw, r9.xxxx, r1.xyzw, l(0,0,0,0)  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                movc r4.xyzw, r9.xxxx, r4.xyzw, l(0,0,0,0)  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 344 "C:\Users\Mark\Documents\C++ Code\Chapter 20 Particle Systems (Colourful) - Copy\ParticleSystem\FX\Terrain.fx"
                mov r3.xyzw, r3.xyzw  // A<0:Inf,1:Inf,2:Inf,3:Inf>
                mov r1.xyzw, r1.xyzw  // D<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov r4.xyzw, r4.xyzw  // S<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 347
                add r3.xyzw, r3.xyzw, r6.xyzw  // ambient<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r1.xyzw, r1.xyzw, r7.xyzw  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                add r4.xyzw, r4.xyzw, r8.xyzw  // spec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 352
                add r1.xyzw, r1.xyzw, r3.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                add r1.xyzw, r4.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 361
                mov r0.x, -cb0[12].w
                add r0.x, r0.x, r0.w
                div r0.x, r0.x, cb0[13].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 364
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, cb0[14].xyzw
                mul r0.xyzw, r0.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw  // litColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                
                #line 367
                mov o0.xyzw, r0.xyzw  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                ret 
                // Approximately 191 instruction slots used
                            
            };
        }

    }

}

